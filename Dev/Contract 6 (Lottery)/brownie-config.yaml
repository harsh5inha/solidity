dependencies:
  # - <organization/repo>@<version>
  - smartcontractkit/chainlink-brownie-contracts@1.1.1
  - OpenZeppelin/openzeppelin-contracts@3.4.0
compiler:
  solc:
    remappings:
    # below we're telling brownie, whenever you see the word "chainlink" in our Lottery.sol file, sub in the github repo to the right
    # We have to do this because otherwise in Lottery.sol, brownie won't know how to pull from npm
      - '@chainlink=smartcontractkit/chainlink-brownie-contracts@1.1.1'
      - '@openzeppelin=OpenZeppelin/openzeppelin-contracts@3.4.0'
dotenv: .env
# Below we're specifying which address to use as the oracle smart contract to get the ETH/USD conversion for various chains
# We also specify whether to verify our source code or not depending on the chain we're deploying to
networks:
# If we don't specify a network, then "development" will be selected as the network
  default: development
  development:
    # The key hash here can be used on a local chain too because the way it works is the mock VRF contract will be able to get a hash and check to see that it matches the keyhash (I think)
    keyhash: '0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311'
    fee: 100000000000000000
    verify: False
  rinkeby:
    vrf_coordinator: '0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B'
    eth_usd_price_feed: '0x8A753747A1Fa494EC906cE90E9f37563A8AF630e'
    link_token: '0x01BE23585060835E02B77ef475b0Cc51aA1e0709'
    keyhash: '0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311'
    fee: 100000000000000000
    verify: True
  mainnet-fork-dev:
    eth_usd_price_feed: '0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419'
    verify: False    
  ganache-local:
    verify: False
wallets:
  from_key: ${PRIVATE_KEY}